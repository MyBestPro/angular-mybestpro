{"version":3,"sources":["app.ts","interface/log.ts","lib/log.ts","angular-mybestpro.min.js","lib/indexedDB.ts","lib/notificationPush.ts","controller/log.ts","component/log.ts"],"names":["angular","module","MyBestPro","MyBestPro.lib","MyBestPro.lib.Log","MyBestPro.lib.Log.constructor","MyBestPro.lib.Log.$get","MyBestPro.lib.Log.debug","MyBestPro.lib.Log.info","MyBestPro.lib.Log.error","MyBestPro.lib.Log.log","MyBestPro.lib.Log.warn","MyBestPro.lib.Log.setLevel","MyBestPro.lib.Log.setDisplayMode","MyBestPro.lib.Log.getDisplayMode","MyBestPro.lib.Log.time","MyBestPro.lib.Log.timeEnd","MyBestPro.lib.Log.onReceivedLog","MyBestPro.lib.Log.onChangeStatus","MyBestPro.lib.Log.getHistory","MyBestPro.lib.Log.message","provider","lib","Log","MyBestPro.lib.IndexedDB","MyBestPro.lib.IndexedDB.constructor","$indexedDB","MyBestPro.lib.IndexedDB.traceDebug","MyBestPro.lib.IndexedDB.traceInfo","MyBestPro.lib.IndexedDB.addTable","MyBestPro.lib.IndexedDB.setDB","MyBestPro.lib.IndexedDB.upgradeDatabase","that","traceInfo","tableName","db","deleteObjectStore","upgradeTable","table","MyBestPro.lib.IndexedDB.upgradeTable","columnName","traceDebug","column","objectStore","createIndex","MyBestPro.lib.IndexedDB.initDatabase","upgradeDatabase","IndexedDB","MyBestPro.lib.NotificationPush","MyBestPro.lib.NotificationPush.constructor","log","this","traceError","notification","configurations","init","defer","$q","$window","cordova","reject","promise","PushNotification","resolve","hasInitialized","hasPermission","onRegistration","callback","on","onError","onNotification","eventName","off","unregister","successHandler","errorHandler","topics","setApplicationIconBadgenumber","count","getApplicationIconBadgenumber","finish","MyBestPro.lib.NotificationPush.traceDebug","MyBestPro.lib.NotificationPush.traceInfo","MyBestPro.lib.NotificationPush.traceError","MyBestPro.lib.NotificationPush.activateSound","MyBestPro.lib.NotificationPush.deactivateSound","MyBestPro.lib.NotificationPush.addTopic","MyBestPro.lib.NotificationPush.setIosSenderID","MyBestPro.lib.NotificationPush.activateIosAlert","MyBestPro.lib.NotificationPush.deactivateIosAlert","MyBestPro.lib.NotificationPush.activateIosBadge","MyBestPro.lib.NotificationPush.deactivateIosBadge","MyBestPro.lib.NotificationPush.activateIosSound","MyBestPro.lib.NotificationPush.deactivateIosSound","MyBestPro.lib.NotificationPush.activateIosClearBadge","MyBestPro.lib.NotificationPush.deactivateIosClearBadge","MyBestPro.lib.NotificationPush.activateIosGcmSandbox","MyBestPro.lib.NotificationPush.deactivateIosGcmSandbox","MyBestPro.lib.NotificationPush.addIosTopic","MyBestPro.lib.NotificationPush.setIosConfiguration","MyBestPro.lib.NotificationPush.setAndroidId","MyBestPro.lib.NotificationPush.setAndroidIcon","MyBestPro.lib.NotificationPush.activateAndroidSound","MyBestPro.lib.NotificationPush.deactivateAndroidSound","MyBestPro.lib.NotificationPush.activateAndroidVibrate","MyBestPro.lib.NotificationPush.deactivateAndroidVibrate","MyBestPro.lib.NotificationPush.activateAndroidClearNotification","MyBestPro.lib.NotificationPush.deactivateAndroidClearNotification","MyBestPro.lib.NotificationPush.activateAndroidForceShow","MyBestPro.lib.NotificationPush.deactivateAndroidForceShow","MyBestPro.lib.NotificationPush.addAndroidTopic","MyBestPro.lib.NotificationPush.setAndroidConfiguration","MyBestPro.lib.NotificationPush.setWindowsConfiguration","MyBestPro.lib.NotificationPush.setConfiguration","NotificationPush","MyBestPro.controller","MyBestPro.controller.Log","MyBestPro.controller.Log.constructor","$scope","messages","push","level","data","JSON","stringify","displayMode","MyBestPro.component","MyBestPro.component.Log","directive","component"],"mappings":"AAAAA,QAAQC,OAAO,aAAc,aCA7B,IAAUC,YAAV,SAAUA,GAENA,cAFMA,YAAAA,cCAV,IAAUA,YAAV,SAAUA,GAAUA,GAAAA,IAAAA,SAAAA,GAEhBC,YAEAA,IAAAA,GAAAA,WAAAC,QAAAA,KAGWC,KAAAA,aAAuBA,GAEvBA,KAAAA,UAAoBA,EACpBA,KAAAA,YAAsBA,EACtBA,KAAAA,SAAmBA,EACnBA,KAAAA,QAAkBA,EAClBA,KAAAA,UAAoBA,EAEnBA,KAAAA,MAAgBA,EAChBA,KAAAA,aAAuBA,EACvBA,KAAAA,YAKAA,KAAAA,UACJA,EAAGA,QAAQA,MACXA,EAAGA,QAAQA,KACXA,EAAGA,QAAQA,KACXA,EAAGA,QAAQA,IACXA,EAAGA,QAAQA,OAEPA,KAAAA,QACJA,EAAGA,QACHA,EAAGA,UACHA,EAAGA,OACHA,EAAGA,MACHA,EAAGA,SA+GXD,MA5GWA,GAAAA,UAAAA,KAAPA,WACIE,OACIA,aAAcA,KAAKA,aACnBA,UAAWA,KAAKA,UAChBA,YAAaA,KAAKA,YAClBA,SAAUA,KAAKA,SACfA,QAASA,KAAKA,QACdA,UAAWA,KAAKA,UAChBA,MAAOA,KAAKA,MACZA,OAAQA,KAAKA,OACbA,SAAUA,KAAKA,SACfA,SAAUA,KAAKA,SACfA,oBAAqBA,KAAKA,oBAC1BA,qBAAsBA,KAAKA,qBAC3BA,MAAOA,KAAKA,MACZA,KAAMA,KAAKA,KACXA,MAAOA,KAAKA,MACZA,KAAMA,KAAKA,KACXA,IAAKA,KAAKA,IACVA,KAAMA,KAAKA,KACXA,QAASA,KAAKA,QACdA,QAASA,KAAKA,QACdA,YAAaA,KAAKA,YAClBA,eAAgBA,KAAKA,eACrBA,cAAeA,KAAKA,cACpBA,eAAgBA,KAAKA,eACrBA,WAAYA,KAAKA,WACjBA,eAAgBA,KAAKA,iBAItBF,EAAAA,UAAAA,MAAPA,WCEQ,IDFKG,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EACTA,MAAKA,QAAQA,KAAKA,UAAWA,YAG1BH,EAAAA,UAAAA,KAAPA,WCKQ,IDLII,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EACRA,MAAKA,QAAQA,KAAKA,SAAUA,YAGzBJ,EAAAA,UAAAA,MAAPA,WCQQ,IDRKK,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EACTA,MAAKA,QAAQA,KAAKA,UAAWA,YAG1BL,EAAAA,UAAAA,IAAPA,WCWQ,IDXGM,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EACPA,MAAKA,QAAQA,KAAKA,QAASA,YAGxBN,EAAAA,UAAAA,KAAPA,WCcQ,IDdIO,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EACRA,MAAKA,QAAQA,KAAKA,YAAaA,YAG5BP,EAAAA,UAAAA,SAAPA,SAAgBA,GACZQ,KAAKA,MAASA,GAGXR,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBS,KAAKA,YAAcA,EACfA,KAAKA,sBACLA,KAAKA,qBAAqBA,MAAMA,MAAOA,KAIxCT,EAAAA,UAAAA,eAAPA,WACIU,MAAOA,MAAKA,aAGTV,EAAAA,UAAAA,KAAPA,SAAYA,EAAmBA,GAAAW,SAAAA,IAAAA,EAAgBA,KAAKA,WAC5CA,EAAQA,KAAKA,OAGjBA,QAAQA,KAAKA,IAGVX,EAAAA,UAAAA,QAAPA,SACIA,EACAA,GAAAY,SAAAA,IAAAA,EAAgBA,KAAKA,WAEjBA,EAAQA,KAAKA,OAGjBA,QAAQA,QAAQA,IAGbZ,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBa,KAAKA,oBAAsBA,GAGxBb,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBc,KAAKA,qBAAuBA,GAGzBd,EAAAA,UAAAA,WAAPA,WACIe,MAAOA,MAAKA,UAGRf,EAAAA,UAAAA,QAARA,SAAgBA,EAAeA,GACvBgB,EAAQA,KAAKA,QAGjBA,KAAKA,SAASA,MAAOA,MAAOA,KAAKA,OAAOA,GAAQA,KAAMA,IACtDA,KAAKA,SAASA,GAAOA,MAAMA,QAASA,GAChCA,KAAKA,qBACLA,KAAKA,oBAAoBA,MACrBA,MACCA,KAAKA,OAAOA,GAAQA,MAxInBhB,EAAAA,WA4IlBA,IA7IaD,GAAAA,IAAGA,GAJAD,EAAAA,EAAAA,MAAAA,EAAAA,UAAVA,YAAAA,eAoJVF,QAAQC,OAAO,aAAaoB,SAAS,SAAUnB,UAAUoB,IAAIC,IEpJ7D,IAAUrB,YAAV,SAAUA,GAAUA,GAAAA,IAAAA,SAAAA,GAEhBC,YAEAA,IAAAA,GAAAA,WAYIqB,QAAAA,GACYA,EACAA,GADAC,KAAAA,mBAAAA,EACAA,KAAAA,IAAAA,EARLA,KAAAA,UACAA,KAAAA,aAAoBA,GACpBA,KAAAA,gBAA0BA,EAEvBA,KAAAA,UAAoBA,iBASvBA,KAAAA,MACHA,aACAA,SAASA,GACL,MAAOC,KA+GnBF,MA3GWA,GAAAA,UAAAA,WAAPA,SAAkBA,GDoJV,ICpJ2BG,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EAC/BA,MAAKA,IAAIA,MAAMA,KAAKA,UAAYA,GAC5BA,EAAKA,QACLA,KAAKA,IAAIA,MAAMA,IAIhBH,EAAAA,UAAAA,UAAPA,SAAiBA,GDuJT,ICvJ0BI,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EAC9BA,MAAKA,IAAIA,KAAKA,KAAKA,UAAYA,GAC3BA,EAAKA,QACLA,KAAKA,IAAIA,KAAKA,IAIfJ,EAAAA,UAAAA,SAAPA,SAAgBA,EAAmBA,GAM/BK,MALAA,MAAKA,OAAOA,GAAaA,EACzBA,KAAKA,WACDA,aAAeA,EAAYA,sBAC3BA,GAEGA,MAGJL,EAAAA,UAAAA,MAAPA,SAAaA,EAAsBA,GAM/BM,MALAA,MAAKA,aAAeA,EACpBA,KAAKA,gBAAkBA,EACvBA,KAAKA,WACDA,eAAiBA,EAAeA,YAAcA,GAE3CA,MAGJN,EAAAA,UAAAA,gBAAPA,SACIA,EACAA,GAEAO,EAAKA,UACDA,0BAA4BA,EAAKA,aAAeA,QAEpDA,EAAKA,WAAWA,oBAAqBA,EAAGA,kBACxCA,QAAQA,QACJA,EAAGA,iBACHA,SAASA,GACLC,EAAKC,UAAU,gBAAkBC,GACjCC,EAAGC,kBAAkBF,KAG7BH,EAAKA,UACDA,2BAA6BA,EAAKA,aAAeA,QAErDA,EAAKA,WAAWA,wBAAyBA,EAAKA,QAC9CA,QAAQA,QACJA,EAAKA,OACLA,SAASA,EAAYA,GACjBC,EAAKK,aAAaF,EAAIG,EAAOJ,MAKlCV,EAAAA,UAAAA,aAAPA,SACIA,EACAA,EACAA,GAEAe,GAAIA,GAAgCA,KAChCA,GACAA,QAASA,EAAMA,QACfA,cAAeA,EAAMA,gBAAiBA,EAE1CA,GAAKA,UAAUA,yBAA2BA,GAC1CA,EAAKA,WAAWA,yBAA0BA,EAC1CA,IAAIA,GAA8BA,EAAGA,kBACjCA,EACAA,EAEJA,SAAQA,QACJA,EAAMA,QACNA,SAASA,EAAaA,GAClBP,EAAKC,UACD,+BACAC,EAAY,IAAMM,GAEtBR,EAAKS,WAAW,mCAAoCC,GACpDC,EAAYC,YACRJ,EAAa,OACbA,EACAE,MAMTlB,EAAAA,UAAAA,aAAPA,WACIqB,GAAIA,GAAgCA,IACpCA,GAAKA,mBACAA,WAAWA,EAAKA,cAChBA,gBACGA,KAAKA,gBACLA,SACIA,EACAA,EACAA,GAEAb,EAAKc,gBAAgBd,EAAMG,MAhI7BX,EAAAA,SACVA,qBACAA,kBAkIRA,IArIarB,GAAAA,UAASA,GAJND,EAAAA,EAAAA,MAAAA,EAAAA,UAAVA,YAAAA,eA4IVF,QAAQC,OAAO,aAAaoB,SAAS,eAAgBnB,UAAUoB,IAAIyB,UC5InE,IAAU7C,YAAV,SAAUA,GAAUA,GAAAA,IAAAA,SAAAA,GAEhBC,YAEAA,IAAAA,GAAAA,WA8BI6C,QAAAA,GACYA,GAAAC,KAAAA,IAAAA,EA3BFA,KAAAA,UAAoBA,wBAEtBA,KAAAA,gBACJA,SACIA,SAAUA,GACVA,KAAMA,GACNA,UAAWA,GACXA,OAAOA,EACPA,SAASA,EACTA,oBAAoBA,EACpBA,WAAWA,EACXA,WAEJA,KACIA,SAAUA,GACVA,OAAOA,EACPA,OAAOA,EACPA,OAAOA,EACPA,YAAYA,EACZA,YAAYA,EACZA,UACAA,eAEJA,YASGA,KAAAA,MACHA,UACAA,KACAA,SACAA,SACIA,EACAA,GAEA,OACIC,IAAKC,KAAKD,IACVT,WAAYU,KAAKV,WACjBR,UAAWkB,KAAKlB,UAChBmB,WAAYD,KAAKC,WACjBC,aAAc,KACdC,eAAgBH,KAAKG,eAMrBC,KAAM,WACF,GAAIC,GAA2BC,EAAGD,OAClC,OAA+B,mBAApBE,GAAQC,SACfH,EAAMI,OAAO,qCACbT,KAAKC,WACD,qCAEGI,EAAMK,UAEjBV,KAAKlB,UAAU,gCACfkB,KAAKV,WACD,yBACAU,KAAKG,gBAETH,KAAKE,aAAeS,iBAAiBP,KACjCJ,KAAKG,gBAETE,EAAMO,QAAQZ,MACPK,EAAMK,UAEjBG,eAAgB,WACZ,MAA6B,QAAtBb,KAAKE,cAEhBY,cAAe,WACX,MAAKd,MAAKa,iBAMHb,KAAKE,aAAaY,iBALrBd,KAAKC,WACD,+CAEG,IAUfc,eAAgB,SACZC,GAGA,MADAhB,MAAKiB,GAAG,eAAgBD,GACjBhB,MAQXkB,QAAS,SAASF,GAEd,MADAhB,MAAKiB,GAAG,QAASD,GACVhB,MASXmB,eAAgB,SACZH,GAGA,MADAhB,MAAKiB,GAAG,eAAgBD,GACjBhB,MAOXiB,GAAI,SACAG,EACAJ,GAEA,MAAKhB,MAAKa,kBAMVb,KAAKE,aAAae,GAAGG,EAAWJ,GACzBhB,OANHA,KAAKC,WACD,8CAEGD,OAWfqB,IAAK,SACDD,EACAJ,GAEA,MAAKhB,MAAKa,kBAMVb,KAAKE,aAAamB,IAAID,EAAWJ,GAC1BhB,OANHA,KAAKC,WACD,8CAEGD,OAsBfsB,WAAY,SACRC,EACAC,EACAC,GAEA,MAAKzB,MAAKa,kBAMVb,KAAKE,aAAaoB,WACdC,EACAC,EACAC,GAEGzB,OAVHA,KAAKC,WACD,8CAEGD,OAiBf0B,8BAA+B,SAC3BH,EACAC,EACAG,GAEA,MAAK3B,MAAKa,kBAMVb,KAAKE,aAAawB,8BACdH,EACAC,EACAG,GAEG3B,OAVHA,KAAKC,WACD,8CAEGD,OAgBf4B,8BAA+B,SAC3BL,EACAC,GAEA,MAAKxB,MAAKa,kBAMVb,KAAKE,aAAa0B,8BACdL,EACAC,GAEGxB,OATHA,KAAKC,WACD,8CAEGD,OAef6B,OAAQ,SACJN,EACAC,GAEA,MAAKxB,MAAKa,kBAMVb,KAAKE,aAAa2B,OAAON,EAAgBC,GAClCxB,OANHA,KAAKC,WACD,8CAEGD,UAkV/BH,MAzUWA,GAAAA,UAAAA,WAAPA,SAAkBA,GF8LV,IE9L2BiC,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EAC/BA,MAAKA,IAAIA,MAAMA,KAAKA,UAAYA,GAC5BA,EAAKA,QACLA,KAAKA,IAAIA,MAAMA,IAIhBjC,EAAAA,UAAAA,UAAPA,SAAiBA,GFiMT,IEjM0BkC,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EAC9BA,MAAKA,IAAIA,KAAKA,KAAKA,UAAYA,GAC3BA,EAAKA,QACLA,KAAKA,IAAIA,KAAKA,IAIflC,EAAAA,UAAAA,WAAPA,SAAkBA,GFoMV,IEpM2BmC,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EAC/BA,MAAKA,IAAIA,MAAMA,KAAKA,UAAYA,GAC5BA,EAAKA,QACLA,KAAKA,IAAIA,MAAMA,IAQhBnC,EAAAA,UAAAA,cAAPA,WACIoC,MAAOA,MACFA,uBACAA,oBAOFpC,EAAAA,UAAAA,gBAAPA,WACIqC,MAAOA,MACFA,yBACAA,sBAOFrC,EAAAA,UAAAA,SAAPA,SAAgBA,GACZsC,MAAOA,MACFA,gBAAgBA,GAChBA,YAAYA,IAQdtC,EAAAA,UAAAA,eAAPA,SAAsBA,GAElBuC,MADAA,MAAKA,eAAeA,IAAIA,SAAWA,EAC5BA,MAYJvC,EAAAA,UAAAA,iBAAPA,WAEIwC,MADAA,MAAKA,eAAeA,IAAIA,OAAQA,EACzBA,MAOJxC,EAAAA,UAAAA,mBAAPA,WAEIyC,MADAA,MAAKA,eAAeA,IAAIA,OAAQA,EACzBA,MAYJzC,EAAAA,UAAAA,iBAAPA,WAEI0C,MADAA,MAAKA,eAAeA,IAAIA,OAAQA,EACzBA,MAOJ1C,EAAAA,UAAAA,mBAAPA,WAEI2C,MADAA,MAAKA,eAAeA,IAAIA,OAAQA,EACzBA,MAYJ3C,EAAAA,UAAAA,iBAAPA,WAEI4C,MADAA,MAAKA,eAAeA,IAAIA,OAAQA,EACzBA,MAOJ5C,EAAAA,UAAAA,mBAAPA,WAEI6C,MADAA,MAAKA,eAAeA,IAAIA,OAAQA,EACzBA,MAOJ7C,EAAAA,UAAAA,sBAAPA,WAEI8C,MADAA,MAAKA,eAAeA,IAAIA,YAAaA,EAC9BA,MAOJ9C,EAAAA,UAAAA,wBAAPA,WAEI+C,MADAA,MAAKA,eAAeA,IAAIA,YAAaA,EAC9BA,MAOJ/C,EAAAA,UAAAA,sBAAPA,WAEIgD,MADAA,MAAKA,eAAeA,IAAIA,YAAaA,EAC9BA,MAOJhD,EAAAA,UAAAA,wBAAPA,WAEIiD,MADAA,MAAKA,eAAeA,IAAIA,YAAaA,EAC9BA,MAQJjD,EAAAA,UAAAA,YAAPA,SAAmBA,GAEfkD,MADAA,MAAKA,eAAeA,IAAIA,OAAOA,KAAKA,GAC7BA,MAQJlD,EAAAA,UAAAA,oBAAPA,SAA2BA,GAEvBmD,MADAA,MAAKA,eAAeA,IAAMA,EACnBA,MAQJnD,EAAAA,UAAAA,aAAPA,SAAoBA,GAEhBoD,MADAA,MAAKA,eAAeA,QAAQA,SAAWA,EAChCA,MAcJpD,EAAAA,UAAAA,eAAPA,SACIA,EACAA,GAGAqD,MADAA,MAAKA,eAAeA,QAAQA,KAAOA,EAC5BA,MAQJrD,EAAAA,UAAAA,qBAAPA,WAEIsD,MADAA,MAAKA,eAAeA,QAAQA,OAAQA,EAC7BA,MAQJtD,EAAAA,UAAAA,uBAAPA,WAEIuD,MADAA,MAAKA,eAAeA,QAAQA,OAAQA,EAC7BA,MAOJvD,EAAAA,UAAAA,uBAAPA,WAEIwD,MADAA,MAAKA,eAAeA,QAAQA,SAAUA,EAC/BA,MAOJxD,EAAAA,UAAAA,yBAAPA,WAEIyD,MADAA,MAAKA,eAAeA,QAAQA,SAAUA,EAC/BA,MAOJzD,EAAAA,UAAAA,iCAAPA,WAEI0D,MADAA,MAAKA,eAAeA,QAAQA,oBAAqBA,EAC1CA,MAOJ1D,EAAAA,UAAAA,mCAAPA,WAEI2D,MADAA,MAAKA,eAAeA,QAAQA,WAAYA,EACjCA,MAQJ3D,EAAAA,UAAAA,yBAAPA,WAEI4D,MADAA,MAAKA,eAAeA,QAAQA,WAAYA,EACjCA,MAQJ5D,EAAAA,UAAAA,2BAAPA,WAEI6D,MADAA,MAAKA,eAAeA,QAAQA,WAAYA,EACjCA,MAOJ7D,EAAAA,UAAAA,gBAAPA,SAAuBA,GAEnB8D,MADAA,MAAKA,eAAeA,QAAQA,OAAOA,KAAKA,GACjCA,MAQJ9D,EAAAA,UAAAA,wBAAPA,SAA+BA,GAE3B+D,MADAA,MAAKA,eAAeA,QAAUA,EACvBA,MAQJ/D,EAAAA,UAAAA,wBAAPA,SAA+BA,GAE3BgE,MADAA,MAAKA,eAAeA,QAAUA,EACvBA,MAQJhE,EAAAA,UAAAA,iBAAPA,SAAwBA,GAEpBiE,MADAA,MAAKA,eAAiBA,EACfA,MAjlBGjE,EAAAA,SAA0BA,kBAmlB5CA,IArlBa7C,GAAAA,iBAAgBA,GAJbD,EAAAA,EAAAA,MAAAA,EAAAA,UAAVA,YAAAA,eA2lBVF,QAAQC,OAAO,aACVoB,SAAS,sBAAuBnB,UAAUoB,IAAI4F,iBC5lBnD,IAAUhH,YAAV,SAAUA,GAAUA,GAAAA,IAAAA,SAAAA,GAEhBiH,YAEAA,IAAAA,GAAAA,WAGIC,QAAAA,GACWA,EACCA,GADDC,KAAAA,OAAAA,EACCA,KAAAA,IAAAA,EAJLA,KAAAA,SAA0BA,SAAUA,UAMvCA,EAAOA,YAAcA,EAAIA,iBACzBA,EAAOA,SAAWA,EAAIA,aACtBA,EAAIA,cACAA,SAASA,EAAeA,GACpBC,EAAOC,SAASC,MACZC,MAAOA,EACPC,KAAMC,KAAKC,UAAUF,OAIjCL,EAAIA,eACAA,SAASA,GACLC,EAAOO,YAAcA,IAIrCT,MAAAA,KAvBaD,GAAAA,IAAGA,GAJAjH,EAAAA,EAAAA,aAAAA,EAAAA,iBAAVA,YAAAA,cCAV,IAAUA,YAAV,SAAUA,GAAUA,GAAAA,IAAAA,SAAAA,GAEhB4H,YAEAA,SAAAA,KAEIC,OACIA,SAAUA,IACVA,SACAA,UAAWA,OACPA,uCACAA,8DACAA,4CACAA,4BACFA,KAAKA,IACPA,WAAYA,EAAUA,WAAWA,KAXzBD,EAAAA,IAAGA,GAJH5H,EAAAA,EAAAA,YAAAA,EAAAA,gBAAVA,YAAAA,eAqBVF,QAAQC,OAAO,aAAa+H,UAAU,SAAU9H,UAAU+H,UAAU1G","file":"angular-mybestpro.min.js","sourcesContent":["angular.module('MyBestPro', ['indexedDB']);\n",null,null,"angular.module('MyBestPro', ['indexedDB']);\n\nvar MyBestPro;\n(function (MyBestPro) {\n    'use strict';\n})(MyBestPro || (MyBestPro = {}));\n\nvar MyBestPro;\n(function (MyBestPro) {\n    var lib;\n    (function (lib) {\n        'use strict';\n        var Log = (function () {\n            function Log() {\n                this.LOG_INACTIVE = -1;\n                this.LOG_ERROR = 0;\n                this.LOG_WARNING = 1;\n                this.LOG_INFO = 2;\n                this.LOG_LOG = 3;\n                this.LOG_DEBUG = 4;\n                this.level = 3;\n                this.displayMode = true;\n                this.messages = [];\n                this.consoles = {\n                    0: console.error,\n                    1: console.warn,\n                    2: console.info,\n                    3: console.log,\n                    4: console.debug,\n                };\n                this.levels = {\n                    0: 'error',\n                    1: 'warning',\n                    2: 'info',\n                    3: 'log',\n                    4: 'debug',\n                };\n            }\n            Log.prototype.$get = function () {\n                return {\n                    LOG_INACTIVE: this.LOG_INACTIVE,\n                    LOG_ERROR: this.LOG_ERROR,\n                    LOG_WARNING: this.LOG_WARNING,\n                    LOG_INFO: this.LOG_INFO,\n                    LOG_LOG: this.LOG_LOG,\n                    LOG_DEBUG: this.LOG_DEBUG,\n                    level: this.level,\n                    levels: this.levels,\n                    consoles: this.consoles,\n                    messages: this.messages,\n                    callbackReceivedLog: this.callbackReceivedLog,\n                    callbackChangeStatus: this.callbackChangeStatus,\n                    debug: this.debug,\n                    info: this.info,\n                    error: this.error,\n                    warn: this.warn,\n                    log: this.log,\n                    time: this.time,\n                    timeEnd: this.timeEnd,\n                    message: this.message,\n                    displayMode: this.displayMode,\n                    setDisplayMode: this.setDisplayMode,\n                    onReceivedLog: this.onReceivedLog,\n                    onChangeStatus: this.onChangeStatus,\n                    getHistory: this.getHistory,\n                    getDisplayMode: this.getDisplayMode,\n                };\n            };\n            Log.prototype.debug = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                this.message(this.LOG_DEBUG, arguments);\n            };\n            Log.prototype.info = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                this.message(this.LOG_INFO, arguments);\n            };\n            Log.prototype.error = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                this.message(this.LOG_ERROR, arguments);\n            };\n            Log.prototype.log = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                this.message(this.LOG_LOG, arguments);\n            };\n            Log.prototype.warn = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                this.message(this.LOG_WARNING, arguments);\n            };\n            Log.prototype.setLevel = function (level) {\n                this.level = level;\n            };\n            Log.prototype.setDisplayMode = function (enabled) {\n                this.displayMode = enabled;\n                if (this.callbackChangeStatus) {\n                    this.callbackChangeStatus.apply(this, [enabled]);\n                }\n            };\n            Log.prototype.getDisplayMode = function () {\n                return this.displayMode;\n            };\n            Log.prototype.time = function (timerName, level) {\n                if (level === void 0) { level = this.LOG_DEBUG; }\n                if (level > this.level) {\n                    return;\n                }\n                console.time(timerName);\n            };\n            Log.prototype.timeEnd = function (timerName, level) {\n                if (level === void 0) { level = this.LOG_DEBUG; }\n                if (level > this.level) {\n                    return;\n                }\n                console.timeEnd(timerName);\n            };\n            Log.prototype.onReceivedLog = function (callbackReceivedLog) {\n                this.callbackReceivedLog = callbackReceivedLog;\n            };\n            Log.prototype.onChangeStatus = function (callbackChangeStatus) {\n                this.callbackChangeStatus = callbackChangeStatus;\n            };\n            Log.prototype.getHistory = function () {\n                return this.messages;\n            };\n            Log.prototype.message = function (level, data) {\n                if (level > this.level) {\n                    return;\n                }\n                this.messages.push({ level: this.levels[level], data: data });\n                this.consoles[level].apply(console, data);\n                if (this.callbackReceivedLog) {\n                    this.callbackReceivedLog.apply(this, [this.levels[level], data]);\n                }\n            };\n            Log.$inject = [];\n            return Log;\n        })();\n        lib.Log = Log;\n    })(lib = MyBestPro.lib || (MyBestPro.lib = {}));\n})(MyBestPro || (MyBestPro = {}));\nangular.module('MyBestPro').provider('MBPLog', MyBestPro.lib.Log);\n\nvar MyBestPro;\n(function (MyBestPro) {\n    var lib;\n    (function (lib) {\n        'use strict';\n        var IndexedDB = (function () {\n            function IndexedDB($indexedDBProvider, log) {\n                this.$indexedDBProvider = $indexedDBProvider;\n                this.log = log;\n                this.tables = {};\n                this.databaseName = '';\n                this.databaseVersion = 0;\n                this.logPrefix = 'MBPIndexedDB: ';\n                this.$get = [\n                    '$indexedDB',\n                    function ($indexedDB) {\n                        return $indexedDB;\n                    },\n                ];\n            }\n            IndexedDB.prototype.traceDebug = function (message) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                this.log.debug(this.logPrefix + message);\n                if (args.length) {\n                    this.log.debug(args);\n                }\n            };\n            IndexedDB.prototype.traceInfo = function (message) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                this.log.info(this.logPrefix + message);\n                if (args.length) {\n                    this.log.info(args);\n                }\n            };\n            IndexedDB.prototype.addTable = function (tableName, tableConfig) {\n                this.tables[tableName] = tableConfig;\n                this.traceDebug('Add table ' + tableName + ' with configuration', tableConfig);\n                return this;\n            };\n            IndexedDB.prototype.setDB = function (databaseName, databaseVersion) {\n                this.databaseName = databaseName;\n                this.databaseVersion = databaseVersion;\n                this.traceDebug('Set DB with ' + databaseName + ' version ' + databaseVersion);\n                return this;\n            };\n            IndexedDB.prototype.upgradeDatabase = function (that, db) {\n                that.traceInfo('Start droping database ' + that.databaseName + ' ...');\n                that.traceDebug('Tables to drop - ', db.objectStoreNames);\n                angular.forEach(db.objectStoreNames, function (tableName) {\n                    that.traceInfo('Delete table ' + tableName);\n                    db.deleteObjectStore(tableName);\n                });\n                that.traceInfo('Start creating database ' + that.databaseName + ' ...');\n                that.traceDebug('Tables to generate - ', that.tables);\n                angular.forEach(that.tables, function (table, tableName) {\n                    that.upgradeTable(db, table, tableName);\n                });\n            };\n            IndexedDB.prototype.upgradeTable = function (db, table, tableName) {\n                var that = this;\n                var tableConfiguration = {\n                    keyPath: table.keyPath,\n                    autoIncrement: table.autoIncrement || false,\n                };\n                that.traceInfo('Start upgrading table ' + tableName);\n                that.traceDebug('Table configuration - ', table);\n                var objectStore = db.createObjectStore(tableName, tableConfiguration);\n                angular.forEach(table.columns, function (column, columnName) {\n                    that.traceInfo('Start indexing table column ' +\n                        tableName + '.' + columnName);\n                    that.traceDebug('Column indexing configuration - ', column);\n                    objectStore.createIndex(columnName + '_idx', columnName, column);\n                });\n            };\n            IndexedDB.prototype.initDatabase = function () {\n                var that = this;\n                that.$indexedDBProvider\n                    .connection(that.databaseName)\n                    .upgradeDatabase(this.databaseVersion, function (event, db, tx) {\n                    that.upgradeDatabase(that, db);\n                });\n            };\n            IndexedDB.$inject = [\n                '$indexedDBProvider',\n                'MBPLogProvider',\n            ];\n            return IndexedDB;\n        })();\n        lib.IndexedDB = IndexedDB;\n    })(lib = MyBestPro.lib || (MyBestPro.lib = {}));\n})(MyBestPro || (MyBestPro = {}));\nangular.module('MyBestPro').provider('MBPIndexedDB', MyBestPro.lib.IndexedDB);\n\nvar MyBestPro;\n(function (MyBestPro) {\n    var lib;\n    (function (lib) {\n        'use strict';\n        var NotificationPush = (function () {\n            function NotificationPush(log) {\n                this.log = log;\n                this.logPrefix = 'MBPNotificationPush: ';\n                this.configurations = {\n                    android: {\n                        senderID: '',\n                        icon: '',\n                        iconColor: '',\n                        sound: true,\n                        vibrate: true,\n                        clearNotifications: true,\n                        forceShow: false,\n                        topics: [],\n                    },\n                    ios: {\n                        senderID: '',\n                        alert: false,\n                        badge: false,\n                        sound: false,\n                        clearBadge: false,\n                        gcmSandbox: false,\n                        topics: [],\n                        categories: {},\n                    },\n                    windows: {},\n                };\n                this.$get = [\n                    '$window',\n                    '$q',\n                    'MBPLog',\n                    function ($window, $q) {\n                        return {\n                            log: this.log,\n                            traceDebug: this.traceDebug,\n                            traceInfo: this.traceInfo,\n                            traceError: this.traceError,\n                            notification: null,\n                            configurations: this.configurations,\n                            /**\n                             * Note: like all plugins you must wait until you receive\n                             * the deviceready event before calling init().\n                             * @returns {IPromise}\n                             */\n                            init: function () {\n                                var defer = $q.defer();\n                                if (typeof $window.cordova === 'undefined') {\n                                    defer.reject('Environment not integrate cordova');\n                                    this.traceError('Environment not integrate cordova');\n                                    return defer.promise;\n                                }\n                                this.traceInfo('Initialize notification push');\n                                this.traceDebug('Using configuration - ', this.configurations);\n                                this.notification = PushNotification.init(this.configurations);\n                                defer.resolve(this);\n                                return defer.promise;\n                            },\n                            hasInitialized: function () {\n                                return this.notification !== null;\n                            },\n                            hasPermission: function () {\n                                if (!this.hasInitialized()) {\n                                    this.traceError('You have not initialized notification push');\n                                    return false;\n                                }\n                                return this.notification.hasPermission();\n                            },\n                            /**\n                             * The event registration will be triggered on each\n                             * successful registration with the 3rd party push service.\n                             * @param callback\n                             * @returns {NotificationPush}\n                             */\n                            onRegistration: function (callback) {\n                                this.on('registration', callback);\n                                return this;\n                            },\n                            /**\n                             * The event error will trigger when an internal error\n                             * occurs and the cache is aborted.\n                             * @param callback\n                             * @returns {NotificationPush}\n                             */\n                            onError: function (callback) {\n                                this.on('error', callback);\n                                return this;\n                            },\n                            /**\n                             * The event notification will be triggered each time a\n                             * push notification is received by a 3rd party push\n                             * service on the device.\n                             * @param callback\n                             * @returns {NotificationPush}\n                             */\n                            onNotification: function (callback) {\n                                this.on('notification', callback);\n                                return this;\n                            },\n                            /**\n                             * @param eventName\n                             * @param callback\n                             * @returns {NotificationPush}\n                             */\n                            on: function (eventName, callback) {\n                                if (!this.hasInitialized()) {\n                                    this.traceError('You have not initialized notification push');\n                                    return this;\n                                }\n                                this.notification.on(eventName, callback);\n                                return this;\n                            },\n                            /**\n                             * Removes a previously registered callback for an event.\n                             * @param eventName\n                             * @param callback\n                             * @returns {NotificationPush}\n                             */\n                            off: function (eventName, callback) {\n                                if (!this.hasInitialized()) {\n                                    this.traceError('You have not initialized notification push');\n                                    return this;\n                                }\n                                this.notification.off(eventName, callback);\n                                return this;\n                            },\n                            /**\n                             * The unregister method is used when the application no\n                             * longer wants to receive push notifications.\n                             * Beware that this cleans up all event handlers previously\n                             * registered, so you will need to re-register\n                             * them if you want them to function again without an\n                             * application reload.\n                             *\n                             * If you provide a list of topics as an optional parameter\n                             * then the application will unsubscribe from\n                             * these topics but continue to receive other push messages.\n                             *\n                             * @param successHandler\n                             * @param errorHandler\n                             * @param topics\n                             * @returns {NotificationPush}\n                             */\n                            unregister: function (successHandler, errorHandler, topics) {\n                                if (!this.hasInitialized()) {\n                                    this.traceError('You have not initialized notification push');\n                                    return this;\n                                }\n                                this.notification.unregister(successHandler, errorHandler, topics);\n                                return this;\n                            },\n                            /**\n                             * Set the badge count visible when the app is not running\n                             * (iOS only)\n                             * @param successHandler\n                             * @param errorHandler\n                             * @param count\n                             * @returns {NotificationPush}\n                             */\n                            setApplicationIconBadgenumber: function (successHandler, errorHandler, count) {\n                                if (!this.hasInitialized()) {\n                                    this.traceError('You have not initialized notification push');\n                                    return this;\n                                }\n                                this.notification.setApplicationIconBadgenumber(successHandler, errorHandler, count);\n                                return this;\n                            },\n                            /**\n                             * Get the current badge count visible when the app is not\n                             * running (iOS only)\n                             * @param successHandler\n                             * @param errorHandler\n                             * @returns {NotificationPush}\n                             */\n                            getApplicationIconBadgenumber: function (successHandler, errorHandler) {\n                                if (!this.hasInitialized()) {\n                                    this.traceError('You have not initialized notification push');\n                                    return this;\n                                }\n                                this.notification.getApplicationIconBadgenumber(successHandler, errorHandler);\n                                return this;\n                            },\n                            /**\n                             * Tells the OS that you are done processing a background\n                             * push notification. (iOS Only)\n                             * @param successHandler\n                             * @param errorHandler\n                             * @returns {NotificationPush}\n                             */\n                            finish: function (successHandler, errorHandler) {\n                                if (!this.hasInitialized()) {\n                                    this.traceError('You have not initialized notification push');\n                                    return this;\n                                }\n                                this.notification.finish(successHandler, errorHandler);\n                                return this;\n                            },\n                        };\n                    },\n                ];\n            }\n            NotificationPush.prototype.traceDebug = function (message) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                this.log.debug(this.logPrefix + message);\n                if (args.length) {\n                    this.log.debug(args);\n                }\n            };\n            NotificationPush.prototype.traceInfo = function (message) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                this.log.info(this.logPrefix + message);\n                if (args.length) {\n                    this.log.info(args);\n                }\n            };\n            NotificationPush.prototype.traceError = function (message) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                this.log.error(this.logPrefix + message);\n                if (args.length) {\n                    this.log.error(args);\n                }\n            };\n            /**\n             * Activate sound for all devices\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.activateSound = function () {\n                return this\n                    .activateAndroidSound()\n                    .activateIosSound();\n            };\n            /**\n             * Deactivate sound for all devices\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.deactivateSound = function () {\n                return this\n                    .deactivateAndroidSound()\n                    .deactivateIosSound();\n            };\n            /**\n             * To subscribe to a GcmPubSub topic for all devices\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.addTopic = function (topic) {\n                return this\n                    .addAndroidTopic(topic)\n                    .addIosTopic(topic);\n            };\n            /**\n             * Setting this uses GCM for notifications instead of native\n             * @param senderID\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.setIosSenderID = function (senderID) {\n                this.configurations.ios.senderID = senderID;\n                return this;\n            };\n            /**\n             * The device shows an alert on receipt of notification.\n             * Note: the value you set this option to the first time you call\n             * the init method will be how the application always acts.\n             * Once this is set programmatically in the init method it can only\n             * be changed manually by the user in Settings>Notifications>App Name.\n             * This is normal iOS behaviour.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.activateIosAlert = function () {\n                this.configurations.ios.alert = true;\n                return this;\n            };\n            /**\n             * The device no shows an alert on receipt of notification.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.deactivateIosAlert = function () {\n                this.configurations.ios.alert = false;\n                return this;\n            };\n            /**\n             * The device sets the badge number on receipt of notification.\n             * Note: the value you set this option to the first time you call\n             * the init method will be how the application always acts.\n             * Once this is set programmatically in the init method it can only\n             * be changed manually by the user in Settings>Notifications>App Name.\n             * This is normal iOS behaviour.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.activateIosBadge = function () {\n                this.configurations.ios.badge = true;\n                return this;\n            };\n            /**\n             * The device not sets the badge number on receipt of notification.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.deactivateIosBadge = function () {\n                this.configurations.ios.badge = false;\n                return this;\n            };\n            /**\n             * The device plays a sound on receipt of notification.\n             * Note: the value you set this option to the first time you call\n             * the init method will be how the application always acts. O\n             * nce this is set programmatically in the init method it can only be\n             * changed manually by the user in Settings>Notifications>App Name.\n             * This is normal iOS behaviour.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.activateIosSound = function () {\n                this.configurations.ios.sound = true;\n                return this;\n            };\n            /**\n             * The device not plays a sound on receipt of notification.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.deactivateIosSound = function () {\n                this.configurations.ios.sound = false;\n                return this;\n            };\n            /**\n             * The badge will be cleared on app startup.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.activateIosClearBadge = function () {\n                this.configurations.ios.clearBadge = true;\n                return this;\n            };\n            /**\n             * The badge will not be cleared on app startup.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.deactivateIosClearBadge = function () {\n                this.configurations.ios.clearBadge = false;\n                return this;\n            };\n            /**\n             * Whether to use sandbox GCM setting.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.activateIosGcmSandbox = function () {\n                this.configurations.ios.gcmSandbox = true;\n                return this;\n            };\n            /**\n             * Whether to use prod GCM setting.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.deactivateIosGcmSandbox = function () {\n                this.configurations.ios.gcmSandbox = false;\n                return this;\n            };\n            /**\n             * To subscribe to a GcmPubSub topic.\n             * Note: only usable in conjunction with senderID.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.addIosTopic = function (topic) {\n                this.configurations.ios.topics.push(topic);\n                return this;\n            };\n            /**\n             * Set full ios configuration\n             * @param configuration\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.setIosConfiguration = function (configuration) {\n                this.configurations.ios = configuration;\n                return this;\n            };\n            /**\n             * Maps to the project number in the Google Developer Console.\n             * @param senderID: string\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.setAndroidId = function (senderID) {\n                this.configurations.android.senderID = senderID;\n                return this;\n            };\n            /**\n             * https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/\n             * API.md#android\n             * http://developer.android.com/reference/android/graphics/Color.html\n             * #parseColor(java.lang.String)\n             * @param iconName: string - The name of a drawable resource to use as\n             * the small-icon. The name should not include the extension.\n             * @param iconBackgroundColor: string - Sets the background color of\n             * the small icon on Android 5.0 and greater.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.setAndroidIcon = function (iconName, iconBackgroundColor) {\n                this.configurations.android.icon = iconName;\n                return this;\n            };\n            /**\n             * It plays the sound specified in the push data or the default\n             * system sound.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.activateAndroidSound = function () {\n                this.configurations.android.sound = true;\n                return this;\n            };\n            /**\n             * It not plays the sound specified in the push data or the default\n             * system sound.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.deactivateAndroidSound = function () {\n                this.configurations.android.sound = false;\n                return this;\n            };\n            /**\n             * The device vibrates on receipt of notification.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.activateAndroidVibrate = function () {\n                this.configurations.android.vibrate = true;\n                return this;\n            };\n            /**\n             * The device not vibrates on receipt of notification.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.deactivateAndroidVibrate = function () {\n                this.configurations.android.vibrate = false;\n                return this;\n            };\n            /**\n             * The app clears all pending notifications when it is closed.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.activateAndroidClearNotification = function () {\n                this.configurations.android.clearNotifications = true;\n                return this;\n            };\n            /**\n             * The app no clears all pending notifications when it is closed.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.deactivateAndroidClearNotification = function () {\n                this.configurations.android.forceShow = false;\n                return this;\n            };\n            /**\n             * Will always show a notification, even when the app is on the\n             * foreground.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.activateAndroidForceShow = function () {\n                this.configurations.android.forceShow = true;\n                return this;\n            };\n            /**\n             * Will not always show a notification, even when the app is on the\n             * foreground.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.deactivateAndroidForceShow = function () {\n                this.configurations.android.forceShow = false;\n                return this;\n            };\n            /**\n             * To subscribe to a GcmPubSub topic.\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.addAndroidTopic = function (topic) {\n                this.configurations.android.topics.push(topic);\n                return this;\n            };\n            /**\n             * Set full android configuration\n             * @param configuration\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.setAndroidConfiguration = function (configuration) {\n                this.configurations.android = configuration;\n                return this;\n            };\n            /**\n             * Set full windows configuration\n             * @param configuration\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.setWindowsConfiguration = function (configuration) {\n                this.configurations.windows = configuration;\n                return this;\n            };\n            /**\n             * Set full configuration\n             * @param configuration\n             * @returns {NotificationPush}\n             */\n            NotificationPush.prototype.setConfiguration = function (configuration) {\n                this.configurations = configuration;\n                return this;\n            };\n            NotificationPush.$inject = ['MBPLogProvider'];\n            return NotificationPush;\n        })();\n        lib.NotificationPush = NotificationPush;\n    })(lib = MyBestPro.lib || (MyBestPro.lib = {}));\n})(MyBestPro || (MyBestPro = {}));\nangular.module('MyBestPro')\n    .provider('MBPNotificationPush', MyBestPro.lib.NotificationPush);\n\nvar MyBestPro;\n(function (MyBestPro) {\n    var controller;\n    (function (controller) {\n        'use strict';\n        var Log = (function () {\n            function Log($scope, log) {\n                this.$scope = $scope;\n                this.log = log;\n                this.$inject = ['$scope', 'MBPLog'];\n                $scope.displayMode = log.getDisplayMode();\n                $scope.messages = log.getHistory();\n                log.onReceivedLog(function (level, data) {\n                    $scope.messages.push({\n                        level: level,\n                        data: JSON.stringify(data),\n                    });\n                });\n                log.onChangeStatus(function (displayMode) {\n                    $scope.displayMode = displayMode;\n                });\n            }\n            return Log;\n        })();\n        controller.Log = Log;\n    })(controller = MyBestPro.controller || (MyBestPro.controller = {}));\n})(MyBestPro || (MyBestPro = {}));\n\nvar MyBestPro;\n(function (MyBestPro) {\n    var component;\n    (function (component) {\n        'use strict';\n        function Log() {\n            return {\n                restrict: 'E',\n                scope: {},\n                template: ['<ul>',\n                    '<li ng-repeat=\"message in messages\" ',\n                    ' ng-show=\"displayMode\" class=\"mbp-log-{{ message.level }}\">',\n                    '<strong ng-bind=\"message.level\"></strong>',\n                    ' {{ message.data }}</li>',\n                ].join(''),\n                controller: MyBestPro.controller.Log,\n            };\n        }\n        component.Log = Log;\n    })(component = MyBestPro.component || (MyBestPro.component = {}));\n})(MyBestPro || (MyBestPro = {}));\nangular.module('MyBestPro').directive('mbpLog', MyBestPro.component.Log);\n",null,null,null,null],"sourceRoot":"/source/"}