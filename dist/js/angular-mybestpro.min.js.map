{"version":3,"sources":["app.ts","lib/log.ts","angular-mybestpro.min.js","lib/indexedDB.ts","controller/log.ts","component/log.ts"],"names":["angular","module","MyBestPro","MyBestPro.lib","MyBestPro.lib.Log","MyBestPro.lib.Log.constructor","MyBestPro.lib.Log.$get","MyBestPro.lib.Log.debug","MyBestPro.lib.Log.info","MyBestPro.lib.Log.error","MyBestPro.lib.Log.log","MyBestPro.lib.Log.warn","MyBestPro.lib.Log.setLevel","MyBestPro.lib.Log.setDisplayMode","MyBestPro.lib.Log.getDisplayMode","MyBestPro.lib.Log.time","MyBestPro.lib.Log.timeEnd","MyBestPro.lib.Log.message","MyBestPro.lib.Log.onReceivedLog","MyBestPro.lib.Log.onChangeStatus","MyBestPro.lib.Log.getHistory","provider","lib","Log","MyBestPro.lib.IndexedDB","MyBestPro.lib.IndexedDB.constructor","$indexedDB","MyBestPro.lib.IndexedDB.addTable","MyBestPro.lib.IndexedDB.setDB","MyBestPro.lib.IndexedDB.initDatabase","that","MBPLogProvider","log","databaseName","debug","db","objectStoreNames","forEach","tableName","deleteObjectStore","tables","table","objectStore","createObjectStore","keyPath","columns","column","columnName","createIndex","IndexedDB","MyBestPro.controller","MyBestPro.controller.Log","MyBestPro.controller.Log.constructor","$scope","messages","push","level","data","JSON","stringify","displayMode","MyBestPro.component","MyBestPro.component.Log","directive","component"],"mappings":"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","file":"angular-mybestpro.min.js","sourcesContent":["angular.module('MyBestPro', ['indexedDB']);",null,"angular.module('MyBestPro', ['indexedDB']);\n\nvar MyBestPro;\n(function (MyBestPro) {\n    var lib;\n    (function (lib) {\n        var Log = (function () {\n            function Log() {\n                this.LOG_INACTIVE = -1;\n                this.LOG_ERROR = 0;\n                this.LOG_WARNING = 1;\n                this.LOG_INFO = 2;\n                this.LOG_LOG = 3;\n                this.LOG_DEBUG = 4;\n                this.level = 3;\n                this.displayMode = true;\n                this.messages = [];\n                this.consoles = {\n                    0: console.error,\n                    1: console.warn,\n                    2: console.info,\n                    3: console.log,\n                    4: console.debug,\n                };\n                this.levels = {\n                    0: 'error',\n                    1: 'warning',\n                    2: 'info',\n                    3: 'log',\n                    4: 'debug',\n                };\n            }\n            Log.prototype.$get = function () {\n                return {\n                    LOG_INACTIVE: this.LOG_INACTIVE,\n                    LOG_ERROR: this.LOG_ERROR,\n                    LOG_WARNING: this.LOG_WARNING,\n                    LOG_INFO: this.LOG_INFO,\n                    LOG_LOG: this.LOG_LOG,\n                    LOG_DEBUG: this.LOG_DEBUG,\n                    level: this.level,\n                    levels: this.levels,\n                    consoles: this.consoles,\n                    messages: this.messages,\n                    callbackReceivedLog: this.callbackReceivedLog,\n                    callbackChangeStatus: this.callbackChangeStatus,\n                    debug: this.debug,\n                    info: this.info,\n                    error: this.error,\n                    warn: this.warn,\n                    log: this.log,\n                    time: this.time,\n                    timeEnd: this.timeEnd,\n                    message: this.message,\n                    displayMode: this.displayMode,\n                    setDisplayMode: this.setDisplayMode,\n                    onReceivedLog: this.onReceivedLog,\n                    onChangeStatus: this.onChangeStatus,\n                    getHistory: this.getHistory,\n                    getDisplayMode: this.getDisplayMode\n                };\n            };\n            Log.prototype.debug = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                this.message(this.LOG_DEBUG, arguments);\n            };\n            Log.prototype.info = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                this.message(this.LOG_INFO, arguments);\n            };\n            Log.prototype.error = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                this.message(this.LOG_ERROR, arguments);\n            };\n            Log.prototype.log = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                this.message(this.LOG_LOG, arguments);\n            };\n            Log.prototype.warn = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                this.message(this.LOG_WARNING, arguments);\n            };\n            Log.prototype.setLevel = function (level) {\n                this.level = level;\n            };\n            Log.prototype.setDisplayMode = function (enabled) {\n                this.displayMode = enabled;\n                if (this.callbackChangeStatus) {\n                    this.callbackChangeStatus.apply(this, [enabled]);\n                }\n            };\n            Log.prototype.getDisplayMode = function () {\n                return this.displayMode;\n            };\n            Log.prototype.time = function (timerName, level) {\n                if (level === void 0) { level = this.LOG_DEBUG; }\n                if (level > this.level) {\n                    return;\n                }\n                console.time(timerName);\n            };\n            Log.prototype.timeEnd = function (timerName, level) {\n                if (level === void 0) { level = this.LOG_DEBUG; }\n                if (level > this.level) {\n                    return;\n                }\n                console.timeEnd(timerName);\n            };\n            Log.prototype.message = function (level, data) {\n                if (level > this.level) {\n                    return;\n                }\n                this.messages.push({ level: this.levels[level], data: data });\n                this.consoles[level].apply(console, data);\n                if (this.callbackReceivedLog) {\n                    this.callbackReceivedLog.apply(this, [this.levels[level], data]);\n                }\n            };\n            Log.prototype.onReceivedLog = function (callbackReceivedLog) {\n                this.callbackReceivedLog = callbackReceivedLog;\n            };\n            Log.prototype.onChangeStatus = function (callbackChangeStatus) {\n                this.callbackChangeStatus = callbackChangeStatus;\n            };\n            Log.prototype.getHistory = function () {\n                return this.messages;\n            };\n            Log.$inject = [];\n            return Log;\n        })();\n        lib.Log = Log;\n    })(lib = MyBestPro.lib || (MyBestPro.lib = {}));\n})(MyBestPro || (MyBestPro = {}));\nangular.module('MyBestPro').provider('MBPLog', MyBestPro.lib.Log);\n\nvar MyBestPro;\n(function (MyBestPro) {\n    var lib;\n    (function (lib) {\n        var IndexedDB = (function () {\n            function IndexedDB($indexedDBProvider, MBPLogProvider) {\n                this.$indexedDBProvider = $indexedDBProvider;\n                this.MBPLogProvider = MBPLogProvider;\n                this.tables = {};\n                this.$get = [\n                    '$indexedDB',\n                    function ($indexedDB) {\n                        return $indexedDB;\n                    }\n                ];\n            }\n            IndexedDB.prototype.addTable = function (tableName, tableConfig) {\n                this.tables[tableName] = tableConfig;\n                this.MBPLogProvider.debug('MBPIndexedDB: Add table ' + tableName + ' with configuration - ', tableConfig);\n            };\n            IndexedDB.prototype.setDB = function (databaseName, databaseVersion) {\n                this.databaseName = databaseName;\n                this.databaseVersion = databaseVersion;\n                this.MBPLogProvider.debug('MBPIndexedDB: Set DB with ' + databaseName + ' version ' + databaseVersion);\n            };\n            IndexedDB.prototype.initDatabase = function () {\n                var that = this;\n                that\n                    .$indexedDBProvider\n                    .connection(that.databaseName)\n                    .upgradeDatabase(that.databaseVersion, function (event, db, tx) {\n                    that.MBPLogProvider.log('MBPIndexedDB: Start droping database ' + that.databaseName + ' ...');\n                    that.MBPLogProvider.debug('MBPIndecedDB: Tables to drop - ', db.objectStoreNames);\n                    angular.forEach(db.objectStoreNames, function (tableName) {\n                        that.MBPLogProvider.log('MBPIndexedDB: Delete table ' + tableName);\n                        db.deleteObjectStore(tableName);\n                    });\n                    that.MBPLogProvider.log('MBPIndexedDB: Start creating database ' + that.databaseName + ' ...');\n                    that.MBPLogProvider.debug('MBPIndecedDB: Tables to generate - ', that.tables);\n                    angular.forEach(that.tables, function (table, tableName) {\n                        that.MBPLogProvider.log('MBPIndexedDB: Start upgrading table ' + tableName);\n                        that.MBPLogProvider.debug('MBPIndexedDB: Table configuration - ', table);\n                        var objectStore = db.createObjectStore(tableName, { keyPath: table.keyPath });\n                        angular.forEach(table.columns, function (column, columnName) {\n                            that.MBPLogProvider.log('MBPIndexedDB: Start indexing table column ' + tableName + '.' + columnName);\n                            that.MBPLogProvider.debug('MBPIndexedDB: Column indexing configuration - ', column);\n                            objectStore.createIndex(columnName + '_idx', columnName, column);\n                        });\n                    });\n                });\n            };\n            IndexedDB.$inject = ['$indexedDBProvider', 'MBPLogProvider'];\n            return IndexedDB;\n        })();\n        lib.IndexedDB = IndexedDB;\n    })(lib = MyBestPro.lib || (MyBestPro.lib = {}));\n})(MyBestPro || (MyBestPro = {}));\nangular.module('MyBestPro').provider('MBPIndexedDB', MyBestPro.lib.IndexedDB);\n\nvar MyBestPro;\n(function (MyBestPro) {\n    var controller;\n    (function (controller) {\n        var Log = (function () {\n            function Log($scope, MBPLog) {\n                this.$scope = $scope;\n                this.MBPLog = MBPLog;\n                this.$inject = ['$scope', 'MBPLog'];\n                $scope.displayMode = MBPLog.getDisplayMode();\n                $scope.messages = MBPLog.getHistory();\n                MBPLog.onReceivedLog(function (level, data) {\n                    $scope.messages.push({\n                        level: level,\n                        data: JSON.stringify(data)\n                    });\n                });\n                MBPLog.onChangeStatus(function (displayMode) {\n                    $scope.displayMode = displayMode;\n                });\n            }\n            return Log;\n        })();\n        controller.Log = Log;\n    })(controller = MyBestPro.controller || (MyBestPro.controller = {}));\n})(MyBestPro || (MyBestPro = {}));\n\nvar MyBestPro;\n(function (MyBestPro) {\n    var component;\n    (function (component) {\n        function Log() {\n            return {\n                restrict: 'E',\n                scope: {},\n                template: '<ul><li ng-repeat=\"message in messages\" ng-show=\"displayMode\" class=\"mbp-log-{{ message.level }}\"><strong ng-bind=\"message.level\"></strong> {{ message.data }}</li>',\n                controller: MyBestPro.controller.Log\n            };\n        }\n        component.Log = Log;\n    })(component = MyBestPro.component || (MyBestPro.component = {}));\n})(MyBestPro || (MyBestPro = {}));\nangular.module('MyBestPro').directive('mbpLog', MyBestPro.component.Log);\n",null,null,null],"sourceRoot":"/source/"}